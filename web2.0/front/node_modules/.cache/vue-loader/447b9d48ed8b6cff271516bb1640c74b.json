{"remainingRequest":"/Users/user/Desktop/web2.0/WeIns_F/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/Desktop/web2.0/WeIns_F/src/components/release_blog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/user/Desktop/web2.0/WeIns_F/src/components/release_blog.vue","mtime":1599311042747},{"path":"/Users/user/Desktop/web2.0/WeIns_F/node_modules/cache-loader/dist/cjs.js","mtime":1594082385499},{"path":"/Users/user/Desktop/web2.0/WeIns_F/node_modules/babel-loader/lib/index.js","mtime":1594082385506},{"path":"/Users/user/Desktop/web2.0/WeIns_F/node_modules/cache-loader/dist/cjs.js","mtime":1594082385499},{"path":"/Users/user/Desktop/web2.0/WeIns_F/node_modules/vue-loader/lib/index.js","mtime":1594082401315}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["release_blog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"release_blog.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"extern\">\n        <el-card class=\"release\" shadow=\"hover\">\n            <div class=\"header\">\n                <div class=\"motto\">\n                    <img src=\"../assets/image/motto.png\" alt=\"motto\" style=\"height: 100%\"/>\n                </div>\n                <div class=\"counter\">\n                    <span>已输入{{counter()}}字</span>\n                </div>\n            </div>\n            <div class=\"input-area\">\n                <div class=\"input\">\n                    <el-input type=\"textarea\" v-model=\"text\"></el-input>\n                </div>\n            </div>\n            <div class=\"foot\">\n                <div class=\"addition\">\n                    <el-row type=\"flex\" class=\"row-bg\" justify=\"space-around\">\n                        <el-col :span=\"4\">\n                            <el-button type=\"text\" icon=\"el-icon-magic-stick\" @click=\"emoji\">表情</el-button>\n                        </el-col>\n                        <el-col :span=\"4\">\n                            <el-upload\n                                    action=''\n                                    style=\"width: 80%;z-index: 998\"\n                                    class=\"avatar-uploader\"\n                                    :on-remove=\"removeFile\"\n                                    :on-change=\"getFile1\"\n                                    :on-success=\"uploadSuccess\"\n                                    list-type=\"picture\"\n                                    :auto-upload=\"false\"\n                                    :show-file-list=\"false\"\n                                    accept=\".jpg,.jpeg,.png\">\n                                <el-button type=\"text\" icon=\"el-icon-picture-outline-round\" @click=\"changeMode\">图片\n                                </el-button>\n                            </el-upload>\n\n                        </el-col>\n                        <el-col :span=\"4\">\n                            <el-upload\n                                    class=\"avatar-uploader el-upload--text\"\n                                    action='' :show-file-list=\"false\"\n                                    :on-success=\"uploadSuccess\"\n                                    :on-remove=\"removeFile\"\n                                    :on-change=\"getFile2\"\n                                    :auto-upload=\"false\"\n                                    accept=\".mp4\">\n                                <el-button type=\"text\" icon=\"el-icon-video-camera\" @click=\"changeMode\">视频</el-button>\n                            </el-upload>\n                        </el-col>\n                        <el-col :span=\"4\">\n                            <el-button type=\"text\" icon=\"el-icon-guide\" @click=\"topic\">话题</el-button>\n                        </el-col>\n                    </el-row>\n                </div>\n\n                <div class=\"issue\">\n                    <el-row class=\"btn\">\n                        <el-button type=\"primary\" size=\"mini\" @click=\"release\" id=\"release_button\">发布</el-button>\n                    </el-row>\n                    <div class=\"issue-state\">\n                        <el-dropdown size=\"mini\" trigger=\"click\" id=\"dropdown_release\">\n                        <span class=\"el-dropdown-link\">\n                        可见：{{state}}<i class=\"el-icon-arrow-down el-icon--right\"></i>\n                        </span>\n                            <el-dropdown-menu slot=\"dropdown\" style=\"width: 80px\" id=\"dropdown_menu_release\">\n                                <p v-on:click=\"handleCommand(0)\">\n                                    <el-dropdown-item id=\"dropdown_menu_release1\">公开</el-dropdown-item>\n                                </p>\n                                <p v-on:click=\"handleCommand(1)\">\n                                    <el-dropdown-item id=\"dropdown_menu_release2\">粉丝</el-dropdown-item>\n                                </p>\n                                <p v-on:click=\"handleCommand(2)\">\n                                    <el-dropdown-item id=\"dropdown_menu_release3\">仅自己</el-dropdown-item>\n                                </p>\n                            </el-dropdown-menu>\n                        </el-dropdown>\n                    </div>\n                </div>\n\n            </div>\n            <div>\n                <el-row v-for=\"(item,i) in fileList\"\n                        v-bind:key=\"i\"\n                        type=\"flex\"\n                        class=\"row-bg\"\n                        justify=\"space-around\">\n                    <el-col :span=\"3\">\n                        <span style=\"color: #8B8B8B;font-family: 'DejaVu Sans', Arial, Helvetica, sans-serif ;float: left;font-size: medium;margin-left: 20px;width: 1%;height: 30px;text-align: left;line-height: 30px\">\n                            {{ i + 1 }}\n                        </span>\n                    </el-col>\n                    <el-col>\n                        <span style=\"color: #8B8B8B;font-family: 'DejaVu Sans', Arial, Helvetica, sans-serif ;float: left;font-size: medium;margin-left: 20px;width: 100%;height: 30px;text-align: left;line-height: 30px\">\n                            {{ item['filename'] }}\n                        </span>\n                    </el-col>\n                    <el-col>\n                        <el-button  @click=\"removeFile(i)\" type=\"text\" size=\"mini\" icon=\"el-icon-close\">删除</el-button>\n                    </el-col>\n                </el-row>\n            </div>\n\n            <div v-if=\"topic_flag\">\n                <el-card shadow=\"hover\">\n                    <el-row style=\"margin-top: 10px;margin-bottom: 5px\">\n                        <el-tag\n                                style=\"margin-left: 3px;margin-right: 3px\"\n                                :key=\"tag.id\"\n                                v-for=\"(tag, i) in chosen_tags\"\n                                closable\n                                :disable-transitions=\"false\"\n                                @close=\"handleClose(i)\">\n                            #{{ tag.content }}#\n                        </el-tag>\n                    </el-row>\n                    <el-row style=\"margin-top: 10px;margin-bottom: 5px\">\n                        <el-autocomplete\n                                popper-class=\"my-autocomplete\"\n                                v-model=\"tagInput\"\n                                :fetch-suggestions=\"querySearchAsync\"\n                                placeholder=\"请输入标签搜索\"\n                                @select=\"handleSelect\"\n                                style=\"width: 60%\"\n                                @keyup.native.enter=\"querySearchAsync\">\n                            <template slot-scope=\"{ item }\">\n                                <div class=\"topic\">#{{ item.content }}#</div>\n                            </template>\n                        </el-autocomplete>\n                        <el-button type=\"primary\" style=\"width: 15%;font-size: 10px;margin-left: 5px\" v-on:click=\"querySearchAsync\">搜索</el-button>\n                        <el-button type=\"primary\" style=\"width: 15%; font-size: 10px\" @click=\"newTag = !newTag\">{{newTagBtn()}}</el-button>\n                    </el-row>\n                    <el-row v-if=\"newTag === true\">\n                        <el-input v-model=\"newTagInput\" placeholder=\"请输入新的标签\" style=\"width: 60%\"></el-input>\n                        <el-button type=\"success\" style=\"width: 15%; font-size: 10px;margin-left: 5px\" @click=\"createTag\">提交</el-button>\n                        <span class=\"tagCounter\" style=\"width: 20%; margin-left: 15px\">还可以输入{{ newTagCounter() }}字</span>\n                    </el-row>\n                </el-card>\n            </div>\n\n            <el-row class=\"emoji-picker\" style=\"z-index: 999\">\n                <VEmojiPicker\n                    v-show=\"showEmojiPicker\"\n                    labelSearch=\"Search\"\n                    lang=\"pt-BR\"\n                    @select=\"onSelectEmoji\"\n                />\n            </el-row>\n\n        </el-card>\n\n    </div>\n</template>\n\n<script>\n    import axios from 'axios';\n    import VEmojiPicker from 'v-emoji-picker';\n\n    export default {\n        components: {\n            VEmojiPicker\n        },\n        data() {\n            return {\n                text: '',\n                state: '公开',\n                uploaded: false,\n                fileList: [],\n                uploadMode: false,\n                lock: 0,\n                dialogVisible: false,\n                showEmojiPicker: false,\n\n                Tags: [],\n                chosen_tags: [],\n                tagInput: '',\n                newTag: false,\n                newTagInput: '',\n                topic_flag: false,\n                message: 'error message',\n                mock:0\n            }\n        },\n        created() {\n            this.loadTags();\n        },\n        methods: {\n            fresh() {\n               this.text = '';\n               this.state = '公开';\n               this.uploaded = false;\n               this.fileList = [];\n               this.uploadMode = false;\n               this.lock = 0;\n               this.dialogVisible = false;\n               this.Tags = [];\n               this.newTag = false;\n               this.newTagInput = '';\n               this.chosen_tags = [];\n               this.tagInput = '';\n               this.message = '';\n               return true;\n            },\n            counter() {\n                return this.text.length;\n            },\n            typify() {\n                if (this.state === '公开')\n                    return 3;\n                else if (this.state === '粉丝')\n                    return 1;\n                else\n                    return 0;\n            },\n            curr_time() {\n                let date = new Date();\n                let res = date.getFullYear() + '-';\n                res+=parseInt((date.getMonth()+1)/10)\n                res += (date.getMonth()+1)%10;\n                res +='-';\n\n\n                res+=parseInt(date.getDate()/10);\n                res += date.getDate()%10;\n                res += ' ';\n\n\n                res +=parseInt(date.getHours()/10);\n                res +=date.getHours()%10;\n                res +=':';\n\n                res +=parseInt(date.getMinutes()/10);\n                res +=date.getMinutes()%10;\n\n                return res;\n            },\n            release() {\n                this.showEmojiPicker = false;\n                if (this.$root.logged === false) {\n                    this.$message.info('请登录后再进行操作！');\n                    return false;\n                }\n\n                if (this.text === '' && this.fileList.length === 0) {\n                    this.$message.error('不能发布空动态！');\n                    return false;\n                }\n\n                let url = 'http://localhost:8088/blog/setBlog';\n                // axios.post(url, {\n                //     uid: sessionStorage.getItem(\"id\"),\n                //     content: this.text,\n                //     type: this.typify(),\n                //     post_day: this.curr_time(),\n                //     video: null,\n                //     imag: JSON.stringify(this.fileList),\n                //     label: JSON.stringify(this.chosen_tags),\n                //     username: sessionStorage.getItem(\"name\"),\n                //     useravatar: JSON.parse(sessionStorage.getItem(\"userMongo\")).avatar\n                // },\n                //     {\n                //         headers: {\n                //             token: sessionStorage.getItem(\"token\")\n                //         }\n                //     }).then(() =>{\n                //     this.$message.success(\"动态发布成功！\");\n                //     this.fresh();\n                //     this.$emit('change')\n                // }).catch(err=> {\n                //     console.log(err);\n                // });\n                return this.axios.post(url).then(res=>{\n                    this.isSubmit=true;\n                    return res === 'success';\n                });\n            },\n            emoji() {\n                this.showEmojiPicker = (this.showEmojiPicker !== true);\n                return this.showEmojiPicker;\n            },\n            onSelectEmoji(emoji) {\n                console.log(emoji);\n                this.text += emoji.data;\n                return this.text;\n            },\n            uploadSuccess() {\n                this.$message.success('上传成功')\n                this.message='上传成功';\n                return true;\n            },\n            topic() {\n                this.topic_flag = (this.topic_flag !== true);\n                this.message='topic!';\n                return true;\n            },\n            handleCommand(command) {\n                if (command === 0) {\n                    this.state = \"公开\";\n                    return 0;\n                }\n                if (command === 1) {\n                    this.state = \"粉丝\";\n                    return 1;\n                }\n                if (command === 2) {\n                    this.state = \"仅自己\";\n                    return 2;\n                }\n                return -1;\n            },\n            changeMode() {\n                this.uploadMode = !this.uploadMode\n                return true;\n            },\n            getBase64(file) {\n                return new Promise(function (resolve, reject) {\n                    let reader = new FileReader();\n                    let imgResult = \"\";\n                    reader.readAsDataURL(file);\n                    reader.onload = function () {\n                        imgResult = reader.result;\n                    };\n                    reader.onerror = function (error) {\n                        reject(error);\n                    };\n                    reader.onloadend = function () {\n                        resolve(imgResult);\n                    };\n                });\n            },\n            getFile(file) {\n                if (!this.uploaded)\n                    this.uploaded = true;\n                this.getBase64(file.raw).then(res => {\n                    this.fileList.push({\n                        filename: file.name,\n                        base64: res,\n                    });\n                });\n                return true;\n            },\n            getFile1(file) {\n                console.log(\"file:\")\n                console.log(file);\n                if (this.lock === 2) {\n                    this.$message.warning(\"图片和视频无法同时上传！\");\n                    this.message=\"图片和视频无法同时上传！\";\n                    return false;\n                } else {\n                    if (this.fileList.length >= 6) {\n                        this.$message.warning(\"做多上传6张图片！\");\n                        return false;\n                    }\n                    this.lock = 1;\n                    this.getFile(file);\n                    return true;\n                }\n            },\n            getFile2(file) {\n                if (this.lock === 1) this.$message.warning(\"图片和视频无法同时上传！\");\n                else {\n                    if (this.fileList.length >= 1) {\n                        this.$message.warning(\"视频太多了，老板做不出来！\");\n                        return false;\n                    }\n                    this.lock = 2;\n                    this.getFile(file);\n                    return true;\n                }\n                return false;\n            },\n            removeFile(i) {\n                this.fileList.splice(i, 1);\n                if (this.fileList.length === 0) {\n\n                    this.uploaded = false;\n                    this.lock = 0;\n                }\n                console.log(this.lock);\n                return true;\n            },\n            handleClose(i){\n                this.chosen_tags.splice(i,1);\n                return true;\n            },\n            loadTags() {\n                let url = 'http://localhost:8088/blog/getLabels';\n                // axios.get(url).then(res => {\n                //     let tags = res.data;\n                //     for (let i = 0; i < tags.length; ++i) {\n                //         let tag = {\n                //             id: tags[i].id,\n                //             content: tags[i].content\n                //         };\n                //         this.Tags.push(tag);\n                //     }\n                // }).catch(err => {\n                //     console.log(err);\n                // });\n                return this.axios.post(url).then(res=>{\n                    this.Tags.push('123')\n                    return res === 'success';\n                });\n            },\n            addTag(tag) {\n                switch (this.chosen_tags.length) {\n                    case 2:\n                        this.$message.error('最多只能添加 2 个标签噢！');\n                        return false;\n                    case 1:\n                        if (this.chosen_tags[0].id === tag.id) {\n                            this.$message.error('不能添加重复标签噢！');\n                            return false;\n                        }\n                        else {\n                            this.chosen_tags.push(tag);\n                            return true;\n                        }\n                    case 0:\n                        this.chosen_tags.push(tag);\n                        return true;\n                    default:\n                        return false;\n                }\n            },\n            querySearchLabel() {\n                let items = [];\n                let url = 'http://localhost:8088/blog/findFuzzyLabels?lab=' + this.tagInput;\n                // axios.get(url).then(res => {\n                //     let labels = res.data;\n                //     for (let i = 0; i < labels.length; ++i) {\n                //         let label = {\n                //             content: labels[i].content,\n                //             id: labels[i].id\n                //         };\n                //         items.push(label);\n                //     }\n                // }).catch(err => {\n                //     console.log(err);\n                // });\n                this.axios.post(url).then(res=>{\n\n                    return res === 'success';\n                });\n\n                return items;\n            },\n            querySearchAsync(queryStr, cbe) {\n                let results = queryStr ? this.querySearchLabel() : this.Tags;\n                clearTimeout(this.timeout);\n                this.timeout = setTimeout(() => { cbe(results); }, 1000 * Math.random());\n                return results;\n            },\n            handleSelect(tag) {\n                this.addTag(tag);\n                return tag;\n            },\n            newTagBtn() {\n                return this.newTag ? '取消' : '新建';\n            },\n            newTagCounter() {\n                if (20 - this.newTagInput.length <= 0) {\n                    this.$message.info('新标签的长度不能超过 20 个字符！');\n                    this.newTagInput = this.newTagInput.substr(0, 20);\n                }\n\n                return 20 - this.newTagInput.length;\n            },\n            createTag() {\n                if(this.mock==1){\n                    this.$root.logged =true;\n                }\n                if(this.mock==-1){\n                    this.$root.logged =false;\n                }\n                if (this.$root.logged === false) {\n                    this.$message.info('请登录后再进行操作！');\n                    return false;\n                }\n\n                if (this.newTagInput === '' || this.newTagInput.length > 20) {\n                    this.$message.info('新标签内容不能为空！');\n                    return false;\n                }\n\n                let url = 'http://localhost:8088/blog/setLabel?label=' + this.newTagInput.replace(/\\s*/g, \"\");\n\n                // axios.get(url, {\n                //     headers: {\n                //         token: sessionStorage.getItem(\"token\")\n                //     }\n                // }).then(() => {\n                //     this.$message.success(\"创建话题 #\" + this.newTagInput + \"# 成功！\");\n                //     this.newTag = false;\n                //     this.newTagInput = '';\n                // }).catch(err=> {\n                //     console.log(err);\n                // });\n                return this.axios.post(url).then(res=>{\n                    return res === 'success';\n                });\n            }\n        }\n    }\n</script>\n\n\n<style scoped>\n    .extern {\n        width: 100%;\n    }\n\n    .release {\n        flex-direction: column;\n        width: 100%;\n    }\n\n    .header {\n        height: 20px;\n    }\n\n    .motto {\n        float: left;\n        height: 30px;\n    }\n\n    .counter {\n        float: right;\n        font-size: 12px;\n        margin-top: 6px;\n        color: #909399;\n    }\n\n    .tagCounter {\n        font-size: 12px;\n        color: #909399;\n    }\n\n    .foot {\n        background-color: white;\n        height: 40px;\n        padding-bottom: -5px;\n    }\n\n    .addition {\n        width: 65%;\n        float: left;\n        background-color: white;\n    }\n\n    .issue {\n        width: 35%;\n        float: left;\n        background-color: white;\n    }\n\n    .issue-state {\n        float: right;\n        margin-right: 10%;\n        margin-top: 10px;\n    }\n\n    .btn {\n        margin-top: 6px;\n        float: right;\n        margin-right: 5%;\n    }\n\n    .topic {\n        text-overflow: ellipsis;\n        overflow: hidden;\n        color: #EE731B;\n    }\n</style>\n"]}]}